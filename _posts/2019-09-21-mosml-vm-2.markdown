I was reading xavier's [zam vm paper](https://xavierleroy.org/talks/zam-kazam05.pdf), i found the transition description is clean, so i'll follow similar notation.

## stack related instructions

| code        | env  | stack                           | regs   | code' | env' | stack'                          | regs'              |
| ----------- | ---- | ------------------------------- | ------ | ----- | ---- | ------------------------------- | ------------------ |
| push;c      | e    | s                               | accu=a | c     | e    | a.s                             |                    |
| push1;c     | e    | v.s                             | accu=a | c     | e    | a.v.s                           | accu=v             |
| push2;c     | e    | v<sub>1</sub>.v<sub>2</sub>.s   | accu=a | c     | e    | a.v<sub>1</sub>.v<sub>2</sub>.s | accu=v<sub>2</sub> |
| access(n);c | e    | v<sub>1</sub>...v<sub>n</sub>.s | accu=a | c     | e    | v<sub>1</sub>...v<sub>n</sub>.s | accu=vn            |
| pop(n);c    | e    | v<sub>1</sub>...v<sub>n</sub>   | accu=a | c     | e    | s                               |                    |
| assign(n);c | e    | v<sub>1</sub>...v<sub>n</sub>   | accu=a | c     | e    | v1...a.s                        | accu=UNIT          |

## env access

| code            | env  | stack | regs   | code' | env' | stack' | regs'     |
| --------------- | ---- | ----- | ------ | ----- | ---- | ------ | --------- |
| pushenvacc(n);c | e    | s     | accu=a | c     | e    | a.s    | accu=e(n) |
| envacc(n); c    | e    | s     | accu=a | c     | e    | s      | accu=e(n) |

## function application

Function application is much more complicated, it seems the previous way is not ok to present the transition. So, i decided to change the table structure,

The first line is the old state, the next line is the next state

### `PUSH_RETADDR`

| code           | stack    | env  | accu | extra_args |
| -------------- | -------- | ---- | ---- | ---------- |
| push_retaddr;c | s        | e    | a    | n          |
| c              | pc.e.n.s | e    | a    | n          |

### `APPLY`

| code        | stack | env  | accu | extra_args |
| ----------- | ----- | ---- | ---- | ---------- |
| apply(n');c | s     | e    | a    | n          |
| a(0)        | s     | a    | a    | n'         |

PS: will check stack, so maybe there is a realloc of stack when `APPLY`.

There is a group of `APPLY` instructions.

### `APPLY<n>`

| code          | stack                                    | env  | accu | extra_args |
| ------------- | ---------------------------------------- | ---- | ---- | ---------- |
| `apply<n>`; c | a<sub>1</sub>.a<sub>2</sub>...a<sub>n</sub>.s | e    | a    | n          |
| a(0)          | a<sub>1</sub>.a<sub>2</sub>...a<sub>n</sub>.pc.e.n.s | a    | a    | `<n>-1`    |

`<n>` is 1 .. 4.

### `APPTERM`

I don't know when will generate the `APPTERM` instruction.

Whatever, here is the transition.

Code sequence:

```
APPTERM; NARGS; SLOTSIZE; C
```

`NARGS` is one byte constant, `SLOTSIZE` is 2-byte constant.

Let's assume that `NARKGS=k`, `SLOTSIZE=q`,

| code            | stack                                    | env  | accu | extra_args |
| --------------- | ---------------------------------------- | ---- | ---- | ---------- |
| appterm; k; q;c | a<sub>1</sub>...a<sub>k</sub>...a<sub>q</sub>.s | e    | a    | n          |
| c               | a<sub>1</sub>...a<sub>k</sub>.s          | e    | a    | n+k        |

OK, the above transition is not done, because there is a `goto appterm` in the source code,

what `appterm:` does is as follow:

| code       | stack | env  | accu | extra_args |
| ---------- | ----- | ---- | ---- | ---------- |
| appterm; c | s     | e    | a    | n          |
| a(0)       | s     | a    | a    | n          |

There is no `pc.e.n` sequence on the stack, so that's something like tailcall, i think.

### `APPTERM<n>`

OK, the `NARGS=k` is removed from the codestream, `NARGS=<n>` now. So that's what `APPTERM<n>` does.

### `RETURN<k>`

| code      | stack                                    | env  | accu | extra_args |           |
| --------- | ---------------------------------------- | ---- | ---- | ---------- | --------- |
| return1;c | v<sub>1</sub>...v<sub>k</sub>.pc.e'.n'.s | e    | a    | n          |           |
| a(0)      | s                                        | a    | a    | n-1        | if n > 0  |
| pc        | s                                        | e'   | a    | n'         | if n == 0 |

If the instruction is `RETURN`, not `RETURN1` or `RETURN2` etc, then the k is taken from the code stream, a 2-byte k.

### `RESTART`

| code      | stack                           | env                                  | accu | extra_args |
| --------- | ------------------------------- | ------------------------------------ | ---- | ---------- |
| restart;c | s                               | v.e'.a<sub>1</sub>...a<sub>k</sub>.e | a    | n          |
| c         | a<sub>1</sub>...a<sub>k</sub>.s | e'                                   | a    | n+k        |

k is `Wosize_val(env) - 2`, seems wired, defer to figure it out later.

### `GRAB`

| code       | stack                                    | env  | accu      | extra_args |           |
| ---------- | ---------------------------------------- | ---- | --------- | ---------- | --------- |
| grab; k; c | s as a<sub>0</sub>a<sub>1</sub>...a<sub>n</sub>.pc.e'.n'.s' | e    | a         | n          |           |
| c          | s                                        | e    | a         | n-k        | if n >= k |
| pc         | s'                                       | e'   | Clos(...) | n'         | if n < k  |

Note: k is the required argument number. if `n < k`, then we need to build a closure, `Clos(n+1, pc=[restart; grab; k; c], a_0 ... a_n)`.

There is always a `RESTART` before `GRAB; k`. So the Clos's pc just pointed to `curr_pc - 3`.

### `CLOSURE`

```c
nvars = u8pc; pc += 1;
accu = Alloc_small(1 + nvars, Closure_tag);
Code_val(accu) = JUMPTGT(s32pc);
for i=0; i<nvars; i++ {
    Field(accu, i+1) = sp[i]
}
```

### `CLOSREC`

Similar to `CLOSURE`, but pass one more arg as first arg, that's `accu` its self.

## For recursive definitions

At line 632,

`DUMMY`

`UPDATE`

## Exeptions

One more register, `trapsp`.

One example,


```plain
exception UserExc of string             label 1;                    
                                        pushtrap 2;  ----------------+
fun foo x =                             access 4;                    |
  (                                     push;                        |
  if x < 5 then                         5;                           |
    raise UserExc "less 5" -----\       test:ge 5;   -------------+  |
  else                           \--->  get_global exc1.UserExc/1;|  |
    x + 3  -------------------\         push;                     |  |
  )                            |        "less 5";                 |  |
  handle  ---------------\     |        makeblock 0:1 2;          |  |
    UserExc x =>          |    |        raise;                    |  |
      (print "oops"; 7)   |    +----->  label 5;   <--------------+  |
    | _ =>                |             access 4;                    |
      (                   |             push;                        |
      print "fox"; 8)     |             3;                           |
    ;                     |             smladdint;                   |
                          |             label 4;                     |
                          |             poptrap;                     |
                          |             return 1;                    |
                          +---------->  label 2;   <-----------------+
                                        push;                       
                                        access 0;                   
                                        getfield 0;                 
                                        push;                       
                                        get_global exc1.UserExc/1;  
                                        test:noteq_test 3;          
                                        "oops";                     
                                        push;                       
                                        get_global Misc.print/0;    
                                        apply 1;                    
                                        7;                          
                                        return 2;                   
                                        label 3;                    
                                        "fox";                      
                                        push;                       
                                        get_global Misc.print/0;    
                                        apply 1;                    
                                        8;                          
                                        return 2                    
```
### `PUSHTRAP`

Push `s32pc`, `trapsp`, `env`, `extra_args` on the stack. And set `trasp = sp`.

And `s32pc` is from code stream, it should be pointed to the handler's entry.

### `POPTRAP`

```c
	trapsp = sp[1];
	sp += 4;	// remove s32pc, trapsp, env, extra_args from stack.
```

### `RAISE`

Set `sp=trapsp`, then restore `s32pc`, `trapsp`, `env`, `extra_args` from the stack. Execute code from `s32pc`.

## Others

Instructions related to globals, blocks(tuple/list), vector, string,  etc.

